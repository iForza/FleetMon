name: Deploy FleetMon to VPS

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Lint backend
        run: |
          cd backend
          npm run lint

      - name: Lint frontend
        run: |
          cd frontend
          npm run lint

      - name: Test backend
        run: |
          cd backend
          npm run test

      - name: Test frontend
        run: |
          cd frontend
          npm run test -- --coverage --watchAll=false

      - name: Build frontend
        run: |
          cd frontend
          npm run build

  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–ø–ª–æ–π
  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(node -p "require('./version.json').version")
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Determine version bump type
        id: version_bump
        run: |
          if [[ "${{ github.event.head_commit.message }}" == *"BREAKING CHANGE"* ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.head_commit.message }}" == *"feat:"* ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          else
            echo "type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: new_version
        run: |
          CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
          BUMP_TYPE="${{ github.event.inputs.deploy_type || steps.version_bump.outputs.type }}"
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version.json
        run: |
          node -e "
          const fs = require('fs');
          const version = require('./version.json');
          version.version = '${{ steps.new_version.outputs.version }}';
          version.lastUpdated = new Date().toISOString();
          version.build = (version.build || 0) + 1;
          version.commit = '${{ github.sha }}';
          version.branch = '${{ github.ref_name }}';
          fs.writeFileSync('./version.json', JSON.stringify(version, null, 2));
          "

      - name: Update CHANGELOG.md
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å—é
          cat > temp_changelog.md << EOF
          # Changelog FleetMon

          ## [${NEW_VERSION}] - ${DATE}

          ### –ò–∑–º–µ–Ω–µ–Ω–∏—è
          - ${COMMIT_MESSAGE}
          - Commit: ${{ github.sha }}
          - Author: ${{ github.actor }}

          EOF
          
          # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞)
          tail -n +2 CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md

      - name: Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add version.json CHANGELOG.md
          git commit -m "üöÄ Bump version to ${{ steps.new_version.outputs.version }}"
          git push

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.new_version.outputs.version }}
          release_name: FleetMon v${{ steps.new_version.outputs.version }}
          body: |
            ## –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–µ—Ä—Å–∏–∏ ${{ steps.new_version.outputs.version }}

            **–ö–æ–º–º–∏—Ç:** ${{ github.sha }}
            **–ê–≤—Ç–æ—Ä:** ${{ github.actor }}
            **–°–æ–æ–±—â–µ–Ω–∏–µ:** ${{ github.event.head_commit.message }}

            ### –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            - ESP32 Firmware
            - Node.js Backend API
            - React Frontend
            - TimescaleDB Database
            - MQTT Integration

            ### –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
            ```bash
            git pull origin main
            ./deploy/deploy.sh
            ```

            **–ü–æ–ª–Ω—ã–π changelog:** [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
          draft: false
          prerelease: false

      - name: Build Docker images
        run: |
          echo "Building production Docker images..."
          docker-compose -f docker-compose.prod.yml build --no-cache
          
          # Tag images with version
          docker tag fleetmon-backend:latest fleetmon-backend:${{ steps.new_version.outputs.version }}
          docker tag fleetmon-frontend:latest fleetmon-frontend:${{ steps.new_version.outputs.version }}

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e
            
            # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            cd /opt/fleetmon || exit 1
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            if [ -f "version.json" ]; then
              sudo -u fleetmon ./deploy/backup-version.sh
            fi
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞
            sudo -u fleetmon git fetch origin
            sudo -u fleetmon git reset --hard origin/main
            
            # –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è
            ./deploy/deploy.sh
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
            docker-compose -f docker-compose.prod.yml ps
            
            echo "‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ FleetMon v${{ steps.new_version.outputs.version }} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"

      - name: Health check
        run: |
          sleep 30
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
          curl -f ${{ secrets.VPS_HOST }}/api/health || exit 1
          
          echo "‚úÖ Health check passed"

      - name: Notify deployment success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            üöÄ FleetMon v${{ steps.new_version.outputs.version }} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!
            
            üì¶ –ö–æ–º–º–∏—Ç: ${{ github.sha }}
            üë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            üåê URL: https://${{ secrets.VPS_HOST }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è FleetMon v${{ steps.new_version.outputs.version }}
            
            üì¶ –ö–æ–º–º–∏—Ç: ${{ github.sha }}
            üë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            üîó –õ–æ–≥–∏: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # –†—É—á–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
  manual_deploy:
    name: Manual Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to VPS (Manual)
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            cd /opt/fleetmon
            ./deploy/deploy.sh
            echo "‚úÖ Manual deployment completed"